{{ config(
    materialized='incremental',
    unique_key=['record_pk']
) }}

WITH aqi_data AS (
    SELECT
        RECORD_TS,
        COUNTRY,
        STATE,
        CITY,
        STATION,
        LATITUDE,
        LONGITUDE,
        MAX(CASE WHEN POLLUTANT_ID = 'PM10' THEN POLLUTANT_AVG END) AS PM10_AVG,
        MAX(CASE WHEN POLLUTANT_ID = 'PM2.5' THEN POLLUTANT_AVG END) AS PM25_AVG,
        MAX(CASE WHEN POLLUTANT_ID = 'SO2' THEN POLLUTANT_AVG END) AS SO2_AVG,
        MAX(CASE WHEN POLLUTANT_ID = 'NO2' THEN POLLUTANT_AVG END) AS NO2_AVG,
        MAX(CASE WHEN POLLUTANT_ID = 'NH3' THEN POLLUTANT_AVG END) AS NH3_AVG,
        MAX(CASE WHEN POLLUTANT_ID = 'CO' THEN POLLUTANT_AVG END) AS CO_AVG,
        MAX(CASE WHEN POLLUTANT_ID = 'OZONE' THEN POLLUTANT_AVG END) AS O3_AVG
    FROM {{ source('aqi_source', 'raw_aqi_data') }}
    GROUP BY RECORD_TS, COUNTRY, STATE, CITY, STATION, LATITUDE, LONGITUDE
),

aqi_data_imputed AS (
    SELECT 
        *,
        COALESCE(
            TRY_TO_NUMBER(PM10_AVG),
            LAST_VALUE(TRY_TO_NUMBER(PM10_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ),
            FIRST_VALUE(TRY_TO_NUMBER(PM10_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
            )
        ) AS PM10_AVG_VALUE,

        COALESCE(
            TRY_TO_NUMBER(PM25_AVG),
            LAST_VALUE(TRY_TO_NUMBER(PM25_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ),
            FIRST_VALUE(TRY_TO_NUMBER(PM25_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
            )
        ) AS PM25_AVG_VALUE,

        COALESCE(
            TRY_TO_NUMBER(SO2_AVG),
            LAST_VALUE(TRY_TO_NUMBER(SO2_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ),
            FIRST_VALUE(TRY_TO_NUMBER(SO2_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
            )
        ) AS SO2_AVG_VALUE,

        COALESCE(
            TRY_TO_NUMBER(NO2_AVG),
            LAST_VALUE(TRY_TO_NUMBER(NO2_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ),
            FIRST_VALUE(TRY_TO_NUMBER(NO2_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
            )
        ) AS NO2_AVG_VALUE,

        COALESCE(
            TRY_TO_NUMBER(NH3_AVG),
            LAST_VALUE(TRY_TO_NUMBER(NH3_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ),
            FIRST_VALUE(TRY_TO_NUMBER(NH3_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
            )
        ) AS NH3_AVG_VALUE,

        COALESCE(
            TRY_TO_NUMBER(CO_AVG),
            LAST_VALUE(TRY_TO_NUMBER(CO_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ),
            FIRST_VALUE(TRY_TO_NUMBER(CO_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
            )
        ) AS CO_AVG_VALUE,

        COALESCE(
            TRY_TO_NUMBER(O3_AVG),
            LAST_VALUE(TRY_TO_NUMBER(O3_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ),
            FIRST_VALUE(TRY_TO_NUMBER(O3_AVG)) IGNORE NULLS OVER (
                PARTITION BY STATION ORDER BY RECORD_TS
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
            )
        ) AS O3_AVG_VALUE

    FROM aqi_data
),
with_aqi AS (
    SELECT
        *,
        CALCULATE_AQI_UDF(
            PM10_AVG_VALUE,
            PM25_AVG_VALUE,
            SO2_AVG_VALUE,
            NO2_AVG_VALUE,
            NH3_AVG_VALUE,
            CO_AVG_VALUE,
            O3_AVG_VALUE
        ) AS AQI
    FROM aqi_data_imputed
)
SELECT
        RECORD_TS,
        HASH(RECORD_TS,LATITUDE,LONGITUDE) AS record_pk,
        HASH(RECORD_TS) AS date_fk,
        hash(latitude, longitude) as location_fk,
        PM10_AVG_VALUE,
        PM25_AVG_VALUE,
        SO2_AVG_VALUE,
        NO2_AVG_VALUE,
        NH3_AVG_VALUE,
        CO_AVG_VALUE,
        O3_AVG_VALUE,
        GET_PROMINENT_POLLUTANT(
            PM10_AVG_VALUE,
            PM25_AVG_VALUE,
            SO2_AVG_VALUE,
            NO2_AVG_VALUE,
            NH3_AVG_VALUE,
            CO_AVG_VALUE,
            O3_AVG_VALUE
        ) AS PROMINENT_POLLUTANT,
        AQI,
        GET_AQI_CATEGORY(AQI) AS AQI_CATEGORY
FROM with_aqi
{% if is_incremental() %}
WHERE HASH(RECORD_TS,LATITUDE,LONGITUDE) NOT IN (
    SELECT record_pk FROM {{ this }}
)
{{ log('Loading ' ~ this ~ ' incrementally', info=True)}}
{% endif %}
ORDER BY date_fk desc